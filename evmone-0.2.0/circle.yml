version: 2.1

executors:
  linux:
    docker:
      - image: ethereum/cpp-build-env:11
  macos:
    macos:
      xcode: 10.3.0

commands:
  build:
    description: "Build"
    steps:
      - checkout
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version

            # Save to the toolchain file.
            echo $CXX --version >> toolchain
      - restore_cache:
          name: "Restore Hunter cache"
          key: &hunter-cache-key hunter-{{arch}}-{{checksum "toolchain"}}-{{checksum "cmake/Hunter/init.cmake"}}
      - run:
          name: "Configure"
          working_directory: ~/build
          command: cmake ../project -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DEVMONE_TESTING=ON $CMAKE_OPTIONS
      - save_cache:
          name: "Save Hunter cache"
          key: *hunter-cache-key
          paths:
            - ~/.hunter/_Base/Cache
      - run:
          name: "Build"
          command: cmake --build ~/build -- -j4
      - run:
          name: "Install"
          command: cmake --build ~/build --target install

  test:
    description: "Test"
    steps:
    - run:
        name: "Test"
        working_directory: ~/build
        command: ctest -R ${TESTS_FILTER:-'.*'} -j4 --schedule-random --output-on-failure

  package:
    description: "Make package"
    steps:
      - run:
          name: "Build Package"
          working_directory: ~/package
          command: cmake --build ~/build --target package && mv ~/build/evmone*.tar.gz* .
      - store_artifacts:
          path: ~/package
          destination: package
      - persist_to_workspace:
          root: ~/package
          paths:
            - evmone-*

jobs:

  lint:
    docker:
    - image: ethereum/cpp-build-env:11
    steps:
    - checkout
    - run:
        name: "Check code format"
        command: |
          clang-format --version
          find include lib test -name '*.hpp' -o -name '*.cpp' -o -name '*.h' -o -name '*.c' | xargs clang-format -i
          git diff --color --exit-code
    - run:
        name: "Run codespell"
        command: |
          codespell --quiet-level=4

  release-linux:
    executor: linux
    environment:
      BUILD_TYPE: Release
      CC: clang-8
      CXX: clang++-8
    steps:
      - build
      - test
      - package

  release-macos:
    executor: macos
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test
      - package

  deploy:
    docker:
      - image: circleci/golang
    steps:
      - run:
          name: "Install GHR"
          command: |
            GO111MODULE=on go get github.com/tcnksm/ghr@v0.12.1
      - attach_workspace:
          at: ~/package
      - run:
          name: "Create GitHub release"
          command: |
            ls -l ~/package
            prerelease_flag=$([[ $CIRCLE_TAG =~ ^v[0-9\.]+$ ]] || echo '-prerelease')
            name="$CIRCLE_PROJECT_REPONAME ${CIRCLE_TAG:1}"
            echo $name
            ghr -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -n "$name" $prerelease_flag $CIRCLE_TAG ~/package

  gcc-min:
    executor: linux
    environment:
      CC: gcc-7
      CXX: g++-7
    steps:
      - build
      - test

  gcc-latest-coverage:
    executor: linux
    environment:
      BUILD_TYPE: Coverage
      CC: gcc-8
      CXX: g++-8
      GCOV: gcov-8
    steps:
      - build
      - run:
          name: "Run unit tests"
          working_directory: ~/build
          command: |
            bin/evmone-unittests
      - run:
          name: "Upload coverage data"
          command: |
            codecov --required --gcov-exec "$GCOV" --gcov-root ~/build

  clang-latest-ubsan:
    executor: linux
    environment:
      CC: clang-8
      CXX: clang++-8
      # Also set visibility to default, because UBSan from clang-8 has issues
      # with comparing pointers to functions. The problem is solved in clang-9.
      CMAKE_OPTIONS: -DSANITIZE=undefined,implicit-conversion,nullability -DCMAKE_CXX_FLAGS=-fvisibility=default
      UBSAN_OPTIONS: halt_on_error=1
      # TODO: There is unresolved __ubsan_vptr_type_cache in evmone.so
      TESTS_FILTER: unittests
    steps:
      - build
      - test

  clang-latest-coverage:
    executor: linux
    environment:
      CC: clang-8
      CXX: clang++-8
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests
    steps:
      - build
      - run:
          name: "Run unit tests"
          working_directory: ~/build
          command: |
            bin/evmone-unittests
      - run:
          name: "Coverage report"
          working_directory: ~/build
          command: |
            mkdir ~/coverage
            llvm-profdata-8 merge *.profraw -o evmone.profdata
            llvm-cov-8 show lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt-8 -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -region-coverage-lt=100 -format=html > ~/coverage/missing.html
            llvm-cov-8 show lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt-8 -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -format=html > ~/coverage/full.html

            llvm-cov-8 report lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt-8 -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc > ~/coverage/report.txt
            llvm-cov-8 report lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt-8 -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -use-color
      - store_artifacts:
          path: ~/coverage
          destination: coverage



  macos-asan:
    executor: macos
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address
      TESTS_FILTER: unittests
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

workflows:
  version: 2
  evmone:
    jobs:
      - lint
      - release-linux:
          filters:
            tags:
              only: /.*/
      - release-macos:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy:
          requires:
            - release-linux
            - release-macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9].*/
      - gcc-min
      - gcc-latest-coverage
      - clang-latest-ubsan
      - clang-latest-coverage
      - macos-asan
